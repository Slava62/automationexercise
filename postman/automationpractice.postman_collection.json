{
	"info": {
		"_postman_id": "029c7325-7296-4f65-80f3-16024284e895",
		"name": "automationpractice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12669134"
	},
	"item": [
		{
			"name": "APIS LIST FOR PRACTICE",
			"item": [
				{
					"name": "Get All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}productsList",
							"host": [
								"{{base_url}}productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'This request method is not supported.' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}productsList",
							"host": [
								"{{base_url}}productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}brandsList",
							"host": [
								"{{base_url}}brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT To All Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'This request method is not supported.' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
									"});\r",
									"pm.test(\"Check the responseCode is 405\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseCode).to.eql(405);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}brandsList",
							"host": [
								"{{base_url}}brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Search Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "search_product",
									"value": "top",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}searchProduct",
							"host": [
								"{{base_url}}searchProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Search Product without search_product parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'Bad request.' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Bad request, search_product parameter is missing in POST request.\");\r",
									"});\r",
									"pm.test(\"Check the responseCode is 400\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}searchProduct",
							"host": [
								"{{base_url}}searchProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Create/Register User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'User created!' message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User created!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var email= Math.random().toString(16).substr(2, 8) + \"@mailto.plus\";\r",
									"pm.environment.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Tester",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "title ",
									"value": "title",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "10",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "may",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1998",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Tester",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Testerovich",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Testers",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "addr1",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "addr2",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "11111",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Alabama",
									"type": "text"
								},
								{
									"key": "city",
									"value": "City",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "11234445566",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}createAccount",
							"host": [
								"{{base_url}}createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Verify Login with valid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'User exists!' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User exists!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Verify Login without email parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'Bad request' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Bad request, email or password parameter is missing in POST request.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE To Verify Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'Not supported method' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Verify Login with invalid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'User not found!' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found!\");\r",
									"});\r",
									"pm.test(\"Check '404' responseCode\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseCode).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "email",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT METHOD To Update User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'User updated!' message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User updated!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Tester updated",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "title ",
									"value": "title updated",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "10",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "may",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1998",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Tester updated",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Testerovich updated",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Testers updated",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "addr1 updated",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "addr2 updated",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "11111",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Alabama",
									"type": "text"
								},
								{
									"key": "city",
									"value": "City",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "11234445566",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}updateAccount",
							"host": [
								"{{base_url}}updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user account detail by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'User Detail'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var ml=pm.environment.get(\"email\");\r",
									"    //console.log(\"env email \" + ml);\r",
									"    //console.log(\"resp email \" + jsonData.user.email);\r",
									"    pm.expect(jsonData.user.email).to.eql(ml);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "password",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}getUserDetailByEmail?email={{email}}",
							"host": [
								"{{base_url}}getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "{{email}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE METHOD To Delete User Account Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check 'Account deleted!' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Account deleted!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}deleteAccount",
							"host": [
								"{{base_url}}deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}